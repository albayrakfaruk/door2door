plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

apply from: "$rootDir/dependencies.gradle"
apply plugin: 'kotlin-android'

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.onur.door2door"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode versions.versionCode
        versionName versions.versionName
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "comonur.door2door.AppTestRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    flavorDimensions "default"

    lintOptions {
        abortOnError false
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        test.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.time.ExperimentalTime"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }

    buildTypes {
        debug {
            resValue("string", "google_maps_key", localProperties['apiKey'])
            buildConfigField("String", "BASE_URL", "\"wss://d2d-frontend-code-challenge.herokuapp.com\"")
        }
        release {

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BASE_URL", "\"wss://d2d-frontend-code-challenge.herokuapp.com\"")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'

    // android supports
    implementation "com.google.android.material:material:$versions.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintVersion"

    // architecture components
    implementation "androidx.fragment:fragment-ktx:$versions.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycleVersion"
    testImplementation "androidx.arch.core:core-testing:$versions.archCompomentVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$versions.coordinatorLayoutVersion"

    //map libs
    implementation "com.google.android.gms:play-services-maps:$versions.mapVersion"
    implementation "com.google.android.libraries.places:places:$versions.placesVersion"

    // hilt
    implementation "com.google.dagger:hilt-android:$versions.hiltCoreVersion"
    implementation "androidx.hilt:hilt-common:$versions.hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$versions.hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"
    kapt "androidx.hilt:hilt-compiler:$versions.hiltVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.hiltCoreVersion"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$versions.hiltCoreVersion"

    // network
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$versions.kotlinCoroutineAdapterVersion"
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"
    implementation "com.google.code.gson:gson:$versions.gson"
    implementation("com.squareup.retrofit2:converter-gson:$versions.retrofitVersion")

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutinesVersion"

    // glide
    implementation "com.github.bumptech.glide:glide:$versions.glideVersion"
    implementation "com.github.florent37:glidepalette:$versions.glidePaletteVersion"
    kapt "com.github.bumptech.glide:compiler:$versions.glideVersion"

    // debugging
    implementation "com.jakewharton.timber:timber:$versions.timberVersion"

    //logger
    implementation "com.orhanobut:logger:$versions.logger"

    //chuck
    implementation "com.readystatesoftware.chuck:library:$versions.chuck"
    implementation "com.readystatesoftware.chuck:library:$versions.chuck"

    // unit test
    testImplementation "junit:junit:$versions.junitVersion"
    testImplementation "androidx.test:core:$versions.androidxTest"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-inline:$versions.mockitoInlineVersion"
    testImplementation "app.cash.turbine:turbine:$versions.turbineVersion"
    testImplementation "org.robolectric:robolectric:$versions.robolectricVersion"
    androidTestImplementation "com.google.truth:truth:$versions.truthVersion"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidxTestJunit"
    androidTestImplementation "com.android.support.test:runner:$versions.androidTestRunner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoVersion"
}

apply from: "$rootDir/spotless.gradle"
repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}